#!/usr/bin/python3
from numpy import *
from matplotlib.pyplot import *
# rcParams['font.family'] = "serif" 
# rcParams['font.size'] = "8" 
# rcParams['text.latex.preamble'] = [r'\usepackage{times}', r'\usepackage{mathptm}'] 
# rcParams['text.usetex'] = 'true'

################################################################################
# WARNING                                                                      #
# This software is not finished yet, and some formulas are incorrect!          #
################################################################################

# Input
Z0 = 50.0
nwtype = "T" # "pi" or "T"

if nwtype == "pi":
    fL = 0.6e9
    S11L = -0.074 - 0.5235j
    S21L = 0.8468 - 0.01895j
    S22L = 0.0538 - 0.52705j
    fH = 1.6e9
    S11H = -0.5065 - 0.5161j
    S21H = 0.5057 - 0.4534j
    S22H = -0.46843 - 0.55308j
elif nwtype == "T":
    fL = 0.5e9
    S11L = -0.658895 - 0.45123j
    S21L = 0.336967 - 0.49253j
    S22L = -0.66157 - 0.4475581j
    fH = 1.0e9
    S11H = -0.888393 - 0.2542j
    S21H = 0.10162 - 0.352j
    S22H = -0.88922 - 0.2510076j

wL = 2*pi*fL
wH = 2*pi*fH

SL = array([S11L, S21L, S22L])
SH = array([S11H, S21H, S22H])

def X1(S):
    S11,S21,S22 = S
    if nwtype == "pi":
        return Z0*imag((1+S11+S22+(S11*S22-S21**2)) / (1+S22-S11-2*S21-(S11*S22-S21**2)))
    elif nwtype == "T":
        return Z0*imag((1+S11-S22-2*S21-(S11*S22-S21**2)) / (1-S11-S22+(S11*S22-S21**2)))

def X2(S):
    S11,S21,S22 = S
    if nwtype == "pi":
        return Z0*imag((1+S11+S22+(S11*S22-S21**2)) / (1+S11-S22-2*S21-(S11*S22-S21**2)))
    elif nwtype == "T":
        return Z0*imag((1-S11+S22-2*S21-(S11*S22-S21**2)) / (1-S11-S22+(S11*S22-S21**2)))

def Xs(S):
    S11,S21,S22 = S
    if nwtype == "pi":
        return Z0*imag((1+S11+S22+S11*S22-S21**2)/(2*S21))
    elif nwtype == "T":
        return Z0*imag(2*S21/(1-S11-S22+S11*S22-S21**2))

def Rs(S):
    S11,S21,S22 = S
    if nwtype == "pi":
        return Z0*real((1+S11+S22+S11*S22-S21**2) / (2*S21))
    elif nwtype == "T":
        return Z0*real(2*S21/(1-S11-S22+S11*S22-S21**2))

def R1(S):
    S11,S21,S22 = S
    if nwtype == "pi":
        return Z0*real((1+S11+S22+(S11*S22-S21**2)) / (1+S22-S11-2*S21-(S11*S22-S21**2)))
    elif nwtype == "T":
        return Z0*real((1+S11-S22-2*S21-(S11*S22-S21**2))/(1-S11-S22+(S11*S22-S21**2)))

def R2(S):
    S11,S21,S22 = S
    if nwtype == "pi":
        # FIXME: Error here: Negative resistances: May be due to bad accuracy of S params
        return Z0*real((1+S11+S22+(S11*S22-S21**2)) / (1+S11-S22-2*S21-(S11*S22-S21**2)))
    elif nwtype == "T":
        return Z0*real((1-S11+S22-2*S21-(S11*S22-S21**2)) / (1-S11-S22+(S11*S22-S21**2)))

def L1shunt(w,S):
    S11,S21,S22 = S
    return Z0/w * imag((1+S11-S22-2*S21-(S11*S22-S21**2)) / (1-S11-S22+(S21*S22-S21**2)))

def L2shunt(w,S):
    S11,S21,S22 = S
    return Z0/w * imag((1-S11+S22-2*S21-(S11*S22-S21**2)) / (1-S11-S22+(S11*S22-S21**2)))

if nwtype == "pi":
    Cs = (wL**2-wH**2)/(wL*wH) * 1 / (wH*Xs(SL) - wL*Xs(SH))
    C1 = (wL**2-wH**2)/(wL*wH) * 1 / (wH*X1(SL) - wL*X1(SH))
    C2 = (wL**2-wH**2)/(wL*wH) * 1 / (wH*X2(SL) - wL*X2(SH))
    Ls = (wL*Xs(SL) - wH*Xs(SH)) / (wL**2 - wH**2)
    L1 = (wL*X1(SL) - wH*X1(SH)) / (wL**2 - wH**2)
    L2 = (wL*X2(SL) - wH*X2(SH)) / (wL**2 - wH**2)
elif nwtype == "T":
    Cs = (wL**2-wH**2)/(wL*wH) * 1/(wH*Xs(SL) - wL*Xs(SH))
    # Ls = (wL*Xs(SL) - wH*Xs(SH))/(wL**2 - wH**2) # FIXME: Error here
    Ls =   (wH*Xs(SH) - wL*Xs(SL))/(wH**2 - wL**2)
    L1 = L1shunt(wL, SL)
    L2 = L2shunt(wL, SL)

if nwtype == "pi":
    print("Cs", Cs*1e12, "vs", 8.09)
    print("C1", C1*1e12, "vs", 2.19)
    print("C2", C2*1e12, "vs", 0.90)
    print("Ls", Ls*1e9, "vs", 0.80)
    print("L1", L1*1e9, "vs", 1.08)
    print("L2", L2*1e9, "vs", 1.63)
    print("Rs", Rs(SL), "--", Rs(SH), "vs 0.16--0.18")
    print("R1", R1(SL), "--", R1(SH), "vs 0.39--1-19")
    print("R2", R2(SL), "--", R2(SH), "vs 0.31--0.09", "*** ERROR ***")
    print("")
    print("XsLow", Xs(SL), "vs", (0.1555-29.7364j))
    print("XsHigh", Xs(SH), "vs", (0.1735-4.2342j))
    print("X1Low", X1(SL), "vs", 1/(2.873e-5+0.0086j))
    print("X1High", X1(SH), "vs", 1/(0.0010+0.0290j))
    print("X2Low", X2(SL), "vs", 1/(-2.568e-5+0.0035j))
    print("X2High", X2(SH), "vs", 1/(-0.0005+0.0106j))
elif nwtype == "T":
    print("Cs", Cs*1e12, "vs", 17.18)
    print("Ls", Ls*1e9, "vs", 0.043, "*** ERROR ***")
    print("L1", L1*1e9, "vs", 0.39)
    print("L2", L2*1e9, "vs", 0.40)
    print("Rs", Rs(SL), "--", Rs(SH), "vs 0.049--0.046")
    print("R1", R1(SL), "--", R1(SH), "vs 0.05--0.11")
    print("R2", R2(SL), "--", R2(SH), "vs 0.04--0.12")
    print("")
    print("XsLow", Xs(SL), "vs", (0.0550-18.3917j))
    print("XsHigh", Xs(SH), "vs", (0.0365-8.9897j))
    print("X1Low", X1(SL), "vs", (0.0010+0.0202j))
    print("X1High", X1(SH), "vs", (0.0023+0.0492j))
    print("X2Low", X2(SL), "vs", (0.0009+0.0230j))
    print("X2High", X2(SH), "vs", (-0.0023+0.0509j))
